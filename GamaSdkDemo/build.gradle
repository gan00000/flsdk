apply plugin: 'com.android.application'
//apply plugin: 'io.fabric' //Google不再支持
// Apply the Crashlytics Gradle plugin
//apply plugin: 'com.google.firebase.crashlytics'

android {

    compileSdkVersion 29

//    错误原因：这是因为java8才支持静态接口方法的原因
//    解决办法：可以通过在app的build.gradle文件中配置使用java8编译
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 29
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86"  // 指定要ndk需要兼容的架构(这样其他依赖包里mips之类的.so会被过滤掉)
        }

        multiDexEnabled true
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //定义一个文件
//            outputFileName = "${variant.name}-${variant.versionName}.apk"
//            def outputFile = output.outputFile
            //定义存储apk的位置和文件名，这里文件名格式定义为 [applicationId_版本号_ReleaseTime_apk]
            if (outputFileName != null && outputFileName.contains("release") && outputFileName.endsWith('.apk')) {

                outputFileName = "${variant.applicationId}_${variant.versionCode}_${variant.versionName}_${getReleaseTime()}_release.apk"

            } else if (outputFile != null && outputFile.name.contains("debug") && outputFile.name.endsWith('.apk')) {

                outputFileName = "${variant.applicationId}_${variant.versionCode}_${variant.versionName}_${getReleaseTime()}_debug.apk"
            }
        }
    }


    signingConfigs {//签名的配置
        release {
            storeFile file('../signkey/flyfun.keystore') //正式签名，以后使用
            storePassword 'flyfun999'
            keyAlias 'flyfun'
            keyPassword 'flyfun999'
        }
        debug {
            storeFile file('../signkey/flyfun.keystore') //正式签名，以后使用
            storePassword 'flyfun999'
            keyAlias 'flyfun'
            keyPassword 'flyfun999'
        }
    }

    buildTypes {
        release {
//            multiDexEnabled true //Add this
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
        }
    }
    productFlavors {

        fzdld {
            signingConfig signingConfigs.release
            applicationId "com.flyfun.fzdld.google"
            minSdkVersion 21
            targetSdkVersion 29
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"
            resValue "string", "scheme", "fzdld"
            resValue "string", "facebook_app_id", "566990643996286"
            resValue "string", "facebook_authorities", "com.facebook.app.FacebookContentProvider566990643996286"
            resValue "string", "fb_login_protocol_scheme", "fb566990643996286"
            resValue "string", "facebook_app_name", "放置大亂鬥"

            //每个游戏的demo设置
            resValue "string", "sdk_name", "放置大亂鬥Demo"

        }

        lyj {
            signingConfig signingConfigs.release
            applicationId "com.flyfun.lyj"
            minSdkVersion 21
            targetSdkVersion 29
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"
            resValue "string", "scheme", "lyj"
            resValue "string", "facebook_app_id", "951929145281682"
            resValue "string", "facebook_authorities", "com.facebook.app.FacebookContentProvider951929145281682"
            resValue "string", "fb_login_protocol_scheme", "fb951929145281682"
            resValue "string", "facebook_app_name", "靈妖記"

            //每个游戏的demo设置
            resValue "string", "sdk_name", "ylj Demo"

        }
    }

    android {
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }
}

repositories {
    flatDir {
        dirs 'libs', '../GamaSDK/libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':GamaSDK')

}


def getReleaseTime() {
    return new Date().format("yyyy-MM-dd-HH-mm", TimeZone.getDefault())
}


apply plugin: 'com.google.gms.google-services'
