import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.library'

android {

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
    }

    lintOptions {
        abortOnError false
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${SDK_VERSION_NAME_AAR}.aar"
            }
        }
    }

    compileSdkVersion 27
    buildToolsVersion '28.0.2'
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 27

        //设置改jar版本
        buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_STARPY_SDK
    }

    buildTypes {
        release {
//            multiDexEnabled true //Add this
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
        }
    }

    productFlavors {
        krone {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"
        }

        krgoogle {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"
        }

        twgoogle {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"
        }
    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}

def getAarVersion() {
    return 'v1.0.1.0'
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.aar'])
    api fileTree(include: ['*.jar'], dir: 'libs')
//    api files('libs/takephoto_library_3.0.1.jar')
//    api files('libs/nineoldandroids-library-2.4.0.jar')
    api project(':libraries-src:GamaBaseLib')
    api project(':libraries-src:gama-pay')
    kroneApi project(':libraries-src:gama_onestore_plug')
    kroneApi project(':libraries-src:gama_cafe_plug')
    krgoogleApi project(':libraries-src:gama_cafe_plug')
    api project(':Thirdlibrary')
    //    compile 'com.android.support:recyclerview-v7:25.3.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'

    twgoogleImplementation(name: 'TW-V3-SDK-release', ext: 'aar')
    twgoogleImplementation ('com.zhihu.android:matisse:0.5.1') {
        exclude group: 'com.android.support'
    }

}


//./gradlew makeJar 出现env: bash\r: No such file or directory的话是由
// 于window生成的工程gradlew文件在mac下换行符有问题


//打包之前，删除以前的文件
task clearJar(type: Delete) {
    delete 'build/libs/'+ getJarName() + '.jar'
}

//打包生成test.jar
task makeLibraryJar(type: Copy) {
    //指定生成的jar名
//    baseName getJarName()

    //从哪里打包class文件,可以指定文件和目录
    from('build/intermediates/packaged-classes/' + 'twgoogle' + '/release/')
    include ('classes.jar')

    //去掉不需要打包的目录和文件
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    //过滤不需要的class
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    exclude "com/gama/sdk/BuildConfig.class"
    exclude ('com/gama/sdk/BuildConfig.class')
    exclude ("com/gama/sdk/BuildConfig.class")
    exclude('test/', 'BuildConfig.class', 'R.class')
    into('build/outputs/libs/')
    rename ('classes.jar', "${getJarName()}.jar")
    //打包到jar后的目录结构
//    into('./')
}

makeLibraryJar.dependsOn(clearJar,build)

def getJarName(){
    return SDK_VERSION_NAME_STARPY_SDK.replace("\"","")
}

task getxxx(){
    println getCurrentFlavor()
}

def getCurrentFlavor() {

    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getIncludedBuilds().toString()
    println "str is " + tskReqStr
    Pattern pattern;

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() )
        return matcher.group(1).toLowerCase()
    else
    {
        println "NO MATCH FOUND"
        return "";
    }
}

task copyJar(type: Copy) {

    from('build/libs/')

    into('../libs/')
    include(getJarName() + '.jar')
}

copyJar.dependsOn(makeLibraryJar)

task createPySdk(type: Copy) {

    from('build/libs/')

    into('../libs/')
    include(getJarName() + '.jar')
}

createPySdk.dependsOn(makeLibraryJar)