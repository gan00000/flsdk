import java.util.regex.Matcher
import java.util.regex.Pattern
import groovy.transform.Field

apply plugin: 'com.android.library'

android {
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
    }

    lintOptions {
        abortOnError false
    }

//    println 'android'
//    libraryVariants.all { variant ->
//        variant.outputs.all { output ->
//            if (outputFile != null && outputFileName.endsWith('.aar')) {
//                outputFileName ="${getCurrentFlavor(variant.flavorName)}-${archivesBaseName}-${SDK_VERSION_NAME_AAR}.aar"
//            }
//        }
//    }

    compileSdkVersion 27
    buildToolsVersion '28.0.2'
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 27
//        libraryVariants.all { variant ->
//            if(variant.flavorName.contains("twgoogle")) {
//                //设置改jar版本
//                buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_TWGOOGLE
//                setVariant(variant.flavorName)
//            }
//            if(variant.flavorName.contains("twweb")) {
//                //设置改jar版本
//                buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_TWWEB
//                setVariant(variant.flavorName)
//            }
//            if(variant.flavorName.contains("krone")) {
//                //设置改jar版本
//                buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_KRONE
//                setVariant(variant.flavorName)
//            }
//            if(variant.flavorName.contains("krgoogle")) {
//                //设置改jar版本
//                buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_KRGOOGLE
//                setVariant(variant.flavorName)
//            }
//
//            println getVariant() + '  xfhxfgds'
//        }
    }

    buildTypes {
        release {
//            multiDexEnabled true //Add this
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
        }
    }

    productFlavors {
        krone {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"

            buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_KRONE

        }

        krgoogle {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"

            buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_KRGOOGLE

        }

        twgoogle {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"

            buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_TWGOOGLE

        }

        twweb {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"

            buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_TWWEB

        }
    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}

@Field String curVariant

def setVariant (vari) {
    curVariant = vari
}

def getVariant() {
    return curVariant
}

def getAarVersion() {
    return 'v1.0.1.0'
}


dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.aar'])
    api fileTree(include: ['*.jar'], dir: 'libs')
//    api files('libs/takephoto_library_3.0.1.jar')
//    api files('libs/nineoldandroids-library-2.4.0.jar')

    //公共库
    api project(':libraries-src:GamaBaseLib')
    api project(':Thirdlibrary')
    //krgoogle引用库
    krgoogleApi project(':libraries-src:gama-pay')
    krgoogleApi project(':libraries-src:gama_cafe_plug')
    //krone引用库
    kroneApi project(':libraries-src:gama_onestore_plug')
    kroneApi project(':libraries-src:gama_cafe_plug')
    //twgoogle应用库
    twgoogleApi project(':libraries-src:gama-pay')
    twgoogleImplementation(name: 'TW-V3-SDK-release', ext: 'aar')
    twgoogleImplementation ('com.zhihu.android:matisse:0.5.1') {
        exclude group: 'com.android.support'
    }
    //twweb引用库
    twwebApi project(':libraries-src:gama-pay')
    twwebImplementation(name: 'TW-V3-SDK-release', ext: 'aar')
    twwebImplementation ('com.zhihu.android:matisse:0.5.1') {
        exclude group: 'com.android.support'
    }

    //    compile 'com.android.support:recyclerview-v7:25.3.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'



}


//./gradlew makeJar 出现env: bash\r: No such file or directory的话是由
// 于window生成的工程gradlew文件在mac下换行符有问题


//打包之前，删除以前的文件
task clearJar(type: Delete) {
    delete 'build/libs/'+ '*.jar'
}

//打包生成test.jar
task makeLibraryJar() {
    //指定生成的jar名
//    baseName getJarName()
    println 'mmmmmmmmm'

    android.productFlavors.all {
        flavor ->
            println flavor.name
    }

//    task.makeLibraryJarKrgoogle.execute()
//    task.makeLibraryJarKrone().execute()
//    task.makeLibraryJarTwgoogle().execute()
//    task.makeLibraryJarTwweb().execute()

    println 'kkkkkkkkkkk'
    //打包到jar后的目录结构
//    into('./')
}

//打包生成test.jar
task makeLibraryJarTwgoogle(type: Copy) {
    //指定生成的jar名
//    baseName getJarName()

    //从哪里打包class文件,可以指定文件和目录
    from('build/intermediates/packaged-classes/' + 'twgoogle' + '/release/')
    include ('classes.jar')

    //去掉不需要打包的目录和文件
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    //过滤不需要的class
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    exclude "com/gama/sdk/BuildConfig.class"
    exclude ('com/gama/sdk/BuildConfig.class')
    exclude ("com/gama/sdk/BuildConfig.class")
    exclude('test/', 'BuildConfig.class', 'R.class')
    into('build/outputs/libs/')
    rename ('classes.jar', "${getJarName(SDK_VERSION_NAME_SDK_TWGOOGLE)}.jar")
    //打包到jar后的目录结构
//    into('./')
}


task makeLibraryJarddd(type:org.gradle.api.tasks.bundling.Jar) {
    //指定生成的jar名
    baseName getJarName()

    //去掉不需要打包的目录和文件
//    exclude 'META-INF/LICENSE.txt'
//    exclude 'META-INF/NOTICE.txt'
//    //过滤不需要的class
////    exclude "**/**/BuildConfig.class"
////    exclude "**/**/BuildConfig\$*.class"
//
//    exclude "android/"
//    exclude "com/google/"
//    exclude "com/facebook/"
//    exclude "**/R.class"
//    exclude "**/R\$*.class"

    include "com/gama/**"
    include "com/lhh/**"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"

    //从哪里打包class文件,可以指定文件和目录
//    from('build/intermediates/classes/release/')
    from('build/intermediates/javac/kroneRelease/compileKroneReleaseJavaWithJavac/classes')

    //打包到jar后的目录结构
//    into('./')
}

task createJar(type: Copy){
    from('build/libs/')

    into('../libs/')
    include(getJarName() + '.jar')
}
createJar.dependsOn(makeLibraryJarddd)

def getJarName(){
    return "sdk"
}

//打包生成test.jar
task makeLibraryJarTwweb(type: Copy) {
    //指定生成的jar名
//    baseName getJarName()

    //从哪里打包class文件,可以指定文件和目录
    from('build/intermediates/packaged-classes/' + 'twweb' + '/release/')
    include ('classes.jar')

    //去掉不需要打包的目录和文件
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    //过滤不需要的class
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    exclude "com/gama/sdk/BuildConfig.class"
    exclude ('com/gama/sdk/BuildConfig.class')
    exclude ("com/gama/sdk/BuildConfig.class")
    exclude('test/', 'BuildConfig.class', 'R.class')
    into('build/outputs/libs/')
    rename ('classes.jar', "${getJarName(SDK_VERSION_NAME_SDK_TWWEB)}.jar")
    //打包到jar后的目录结构
//    into('./')
}

//打包生成test.jar
task makeLibraryJarKrone(type: Copy) {
    //指定生成的jar名
//    baseName getJarName()

    //从哪里打包class文件,可以指定文件和目录
    from('build/intermediates/packaged-classes/' + 'krone' + '/release/')
    include ('classes.jar')

    //去掉不需要打包的目录和文件
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    //过滤不需要的class
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    exclude "com/gama/sdk/BuildConfig.class"
    exclude ('com/gama/sdk/BuildConfig.class')
    exclude ("com/gama/sdk/BuildConfig.class")
    exclude('test/', 'BuildConfig.class', 'R.class')
    into('build/outputs/libs/')
    rename ('classes.jar', "${getJarName(SDK_VERSION_NAME_SDK_KRONE)}.jar")
    //打包到jar后的目录结构
//    into('./')
}

//打包生成test.jar
task makeLibraryJarKrgoogle(type: Copy) {
    //指定生成的jar名
//    baseName getJarName()

    //从哪里打包class文件,可以指定文件和目录
    from('build/intermediates/packaged-classes/' + 'krgoogle' + '/release/')
    include ('classes.jar')

    //去掉不需要打包的目录和文件
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    //过滤不需要的class
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    exclude "com/gama/sdk/BuildConfig.class"
    exclude ('com/gama/sdk/BuildConfig.class')
    exclude ("com/gama/sdk/BuildConfig.class")
    exclude('test/', 'BuildConfig.class', 'R.class')
    into('build/outputs/libs/')
    rename ('classes.jar', "${getJarName(SDK_VERSION_NAME_SDK_KRGOOGLE)}.jar")
    //打包到jar后的目录结构
//    into('./')
}

//makeLibraryJar.dependsOn(clearJar,build)
makeLibraryJarTwgoogle.dependsOn(clearJar,build)
makeLibraryJarTwweb.dependsOn(clearJar,build)
makeLibraryJarKrone.dependsOn(clearJar,build)
makeLibraryJarKrgoogle.dependsOn(clearJar,build)

def getJarName(name){
    return name.replace("\"","")
}


task copyJar(type: Copy) {

    from('build/libs/')

    into('../libs/')
    include(getVariant() + '.jar')
}

copyJar.dependsOn(makeLibraryJar)

task createPySdk(type: Copy) {

    from('build/libs/')

    into('../libs/')
    include(getVariant() + '.jar')
}

createPySdk.dependsOn(makeLibraryJar)
