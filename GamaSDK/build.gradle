import java.util.regex.Matcher
import java.util.regex.Pattern
import groovy.transform.Field

apply plugin: 'com.android.library'

android {
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
    }

    lintOptions {
        abortOnError false
    }

//    println 'android'
//    libraryVariants.all { variant ->
//        variant.outputs.all { output ->
//            if (outputFile != null && outputFileName.endsWith('.aar')) {
//                outputFileName ="${getCurrentFlavor(variant.flavorName)}-${archivesBaseName}-${SDK_VERSION_NAME_AAR}.aar"
//            }
//        }
//    }

    compileSdkVersion 27
    buildToolsVersion '28.0.2'
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 27
//        libraryVariants.all { variant ->
//            if(variant.flavorName.contains("twgoogle")) {
//                //设置改jar版本
//                buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_TWGOOGLE
//                setVariant(variant.flavorName)
//            }
//            if(variant.flavorName.contains("twweb")) {
//                //设置改jar版本
//                buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_TWWEB
//                setVariant(variant.flavorName)
//            }
//            if(variant.flavorName.contains("krone")) {
//                //设置改jar版本
//                buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_KRONE
//                setVariant(variant.flavorName)
//            }
//            if(variant.flavorName.contains("krgoogle")) {
//                //设置改jar版本
//                buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_KRGOOGLE
//                setVariant(variant.flavorName)
//            }
//
//            println getVariant() + '  xfhxfgds'
//        }
    }

    buildTypes {
        release {
//            multiDexEnabled true //Add this
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
        }
    }

    productFlavors {
        krone {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"

            buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_KRONE

        }

        krgoogle {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"

            buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_KRGOOGLE

        }

        twgoogle {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"

            buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_TWGOOGLE

        }

        twweb {
            minSdkVersion 18
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            flavorDimensions "1"

            buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_SDK_TWWEB

        }
    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}

@Field String curVariant

def setVariant (vari) {
    curVariant = vari
}

def getVariant() {
    return curVariant
}

def getAarVersion() {
    return 'v1.0.1.0'
}


dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.aar'])
    api fileTree(include: ['*.jar'], dir: 'libs')
//    api files('libs/takephoto_library_3.0.1.jar')
//    api files('libs/nineoldandroids-library-2.4.0.jar')

    //公共库
    api project(':libraries-src:GamaBaseLib')
    api project(':Thirdlibrary')
    //krgoogle引用库
    krgoogleApi project(':libraries-src:gama-pay')
    krgoogleApi project(':libraries-src:gama_cafe_plug')
    //krone引用库
    kroneApi project(':libraries-src:gama_onestore_plug')
    kroneApi project(':libraries-src:gama_cafe_plug')
    //twgoogle应用库
    twgoogleApi project(':libraries-src:gama-pay')
    twgoogleImplementation(name: 'TW-V3-SDK-release', ext: 'aar')
    twgoogleImplementation ('com.zhihu.android:matisse:0.5.1') {
        exclude group: 'com.android.support'
    }
    //twweb引用库
    twwebApi project(':libraries-src:gama-pay')
    twwebImplementation(name: 'TW-V3-SDK-release', ext: 'aar')
    twwebImplementation ('com.zhihu.android:matisse:0.5.1') {
        exclude group: 'com.android.support'
    }

    //    compile 'com.android.support:recyclerview-v7:25.3.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'



}


//./gradlew makeJar 出现env: bash\r: No such file or directory的话是由
// 于window生成的工程gradlew文件在mac下换行符有问题


//打包之前，删除以前的文件
task clearJar(type: Delete) {
    delete 'build/libs/'+ '*.jar'
}

@Field String tempVar

//打包生成test.jar
task makeLibraryJar {

    group 'aaa'

//    println android.productFlavors

    doLast {
        android.productFlavors.each {
            flavor ->
                println flavor.name
                def mtask = tasks.findByName("task$flavor.name")
//            mtask.description = flavor.name
                mtask.execute()
        }

    }


}

android.productFlavors.each {
    flavor ->
        println flavor.name
        task "task$flavor.name"(type:org.gradle.api.tasks.bundling.Jar) {
            group 'aaa'

            //指定生成的jar名
            baseName 'gama-sdk-' + flavor.name + '-' + SDK_VERSION_NAME_SDK.replace("\"","")

            println baseName
            include "com/gama/**"
            include "com/lhh/**"
            exclude "com/gama/connector/**"
            exclude "com/gama/pay/**"
            exclude "com/gama/cafe/**"
            exclude "com/gama/onestore/**"
            exclude "com/gama/thirdlib/**"
            exclude "**/R.class"
            exclude "**/R\$*.class"
            exclude "**/**/BuildConfig.class"
            exclude "**/**/BuildConfig\$*.class"

            println 'ddd -- ' + flavor.name.charAt(0).toUpperCase()
            println 'ddd -- ' + flavor.name.substring(1)

            //从哪里打包class文件,可以指定文件和目录
            from('build/intermediates/javac/' + flavor.name +'Release/compile' + flavor.name.charAt(0).toUpperCase() + flavor.name.substring(1) + 'ReleaseJavaWithJavac/classes')
        }
}

task createJar(type: Copy){

    group 'aaa'
    from('build/libs/')

    into('../libs/')
//    include(getJarName() + '.jar')
}

task deleteJar(type: Delete){

    group 'aaa'
    delete('build/libs')
    delete('../libs')

}

createJar.dependsOn(deleteJar,makeLibraryJar)
//createJar.dependsOn(clean,build,makeLibraryJar)
//createJar.dependsOn(clean,build,makeLibraryJarKrone,makeLibraryJarKrgoogle,makeLibraryJarTwweb,makeLibraryJarTwgoogle)

def getJarName(name){
    return name.replace("\"","")+'.jar'
}
